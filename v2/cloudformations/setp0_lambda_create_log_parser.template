AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda code to parse EMR logs
Parameters:
  S3Bucket:
    Description: Source Code S3Bucket
    Type: String
    Default: aws-bigdata-blog
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      - arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      - arn:aws:iam::aws:policy/IAMFullAccess
      - arn:aws:iam::aws:policy/AmazonSSMFullAccess
  CreateRangerLogParser:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: RangerLogParser
      Handler: parserangerlog.lambda_landler
      Role: !GetAtt [LambdaExecutionRole, Arn]
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: artifacts/aws-blog-emr-ranger-v2/logparser.zip
      Runtime: python2.7
      Timeout: '300'

  LogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Sub "rangeradminpolicyupdates"
        RetentionInDays: 14
  LogGroupLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateRangerLogParser
      Action: "lambda:InvokeFunction"
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:rangeradminpolicyupdates:*"
      SourceAccount:
        Ref: "AWS::AccountId"
    DependsOn: "LogGroup"
  LogsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      LogGroupName: "rangeradminpolicyupdates"
      FilterPattern: '[w1, w2, w3,W4,W5,W6,W7,W8="<==", w9="ServiceREST.updatePolicy*" || w9="ServiceREST.createPolicy*" || w9="ServiceREST.deletePolicy*",w10]'
      DestinationArn:
         Fn::GetAtt:
                - "CreateRangerLogParser"
                - "Arn"
    DependsOn:
      - LogGroupLambdaInvokePermission
      - CreateRangerLogParser
